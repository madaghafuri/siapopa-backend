# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    # image: mghafuri/siapopa-backend:latest
    ports:
      - 3000:3000
    environment:
      - API_TOKEN=siapopa-dev
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    develop:
      watch:
        - action: sync+restart
          path: ./src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker-compose up`.
  #     depends_on:
  #       db:
  #         condition: service_healthy
  db:
    image: postgis/postgis:15-3.4-alpine
    restart: always
    user: postgres
    environment:
      - POSTGRES_DB=siapopa-dev
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432/tcp"
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
# secrets:
#   db-password:
#     file: db/password.txt
volumes:
  pgdata:
